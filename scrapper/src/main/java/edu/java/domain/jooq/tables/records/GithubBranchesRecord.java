/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables.records;


import edu.java.domain.jooq.tables.GithubBranches;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GithubBranchesRecord extends TableRecordImpl<GithubBranchesRecord> implements Record2<Long, String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_BRANCHES.LINK_ID</code>.
     */
    public void setLinkId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_BRANCHES.LINK_ID</code>.
     */
    @Nullable
    public Long getLinkId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>GITHUB_BRANCHES.BRANCHES</code>.
     */
    public void setBranches(@NotNull String[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_BRANCHES.BRANCHES</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public String[] getBranches() {
        return (String[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Long, String[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Long, String[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return GithubBranches.GITHUB_BRANCHES.LINK_ID;
    }

    @Override
    @NotNull
    public Field<String[]> field2() {
        return GithubBranches.GITHUB_BRANCHES.BRANCHES;
    }

    @Override
    @Nullable
    public Long component1() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String[] component2() {
        return getBranches();
    }

    @Override
    @Nullable
    public Long value1() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String[] value2() {
        return getBranches();
    }

    @Override
    @NotNull
    public GithubBranchesRecord value1(@Nullable Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public GithubBranchesRecord value2(@NotNull String[] value) {
        setBranches(value);
        return this;
    }

    @Override
    @NotNull
    public GithubBranchesRecord values(@Nullable Long value1, @NotNull String[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubBranchesRecord
     */
    public GithubBranchesRecord() {
        super(GithubBranches.GITHUB_BRANCHES);
    }

    /**
     * Create a detached, initialised GithubBranchesRecord
     */
    @ConstructorProperties({ "linkId", "branches" })
    public GithubBranchesRecord(@Nullable Long linkId, @NotNull String[] branches) {
        super(GithubBranches.GITHUB_BRANCHES);

        setLinkId(linkId);
        setBranches(branches);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GithubBranchesRecord
     */
    public GithubBranchesRecord(edu.java.domain.jooq.tables.pojos.GithubBranches value) {
        super(GithubBranches.GITHUB_BRANCHES);

        if (value != null) {
            setLinkId(value.getLinkId());
            setBranches(value.getBranches());
            resetChangedOnNotNull();
        }
    }
}
