app:
  scheduler:
    enable: true
    interval: 100s
    force-check-delay: 100s
  stack-overflow-url:
    default-url: https://api.stackexchange.com/2.3
  git-hub-url:
    default-url: https://api.github.com
  bot-link:
    link: http://localhost:8090
  database-access-type: JPA
  retry:
    max-attempts: 3
    retry-on-statuses:
      - CLIENT_ERROR
      - SERVER_ERROR
    type: LINEAR
    delay: 1s
  use-queue: true
  kafka:
    bootstrap-servers: localhost:29091,localhost:29092,localhost:29093
    topic:
      updates-topic-name: scrapper.update
      partitions: 2
      replicas: 2


spring:
  application:
    name: scrapper
  datasource:
    driver-class-name: org.postgresql.Driver
    url: "jdbc:postgresql://localhost:5433/scrapper"
    username: postgres
    password: postgres
  liquibase:
    enabled: false
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  cache:
    cache-names: rate-limit-bucket-scrapper
    caffeine:
      spec: maximumSize=50000,expireAfterAccess=3600s

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  show-actuator: true
  swagger-ui:
    path: /scrapper/swagger-ui


bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket-scrapper
      url: /.*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - bandwidths:
            - capacity: 20
              time: 1
              unit: minutes
              refill-speed: interval

management:
  server:
    port: 8081
  endpoints:
    web:
      base-path: /
      exposure:
        include: health,info,prometheus
      path-mapping:
        prometheus: metrics
  metrics:
    tags:
      application: ${spring.application.name}
